% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scikitlearn_model.r
\name{scikitlearn_model}
\alias{scikitlearn_model}
\title{Wrapper for Python Scikit-Learn Models}
\usage{
scikitlearn_model(path)
}
\arguments{
\item{path}{a path to the pickle file. Can be used without other arguments if you are sure that active Python version match pickle version.}

\item{yml}{a path to the yml file. Conda virtual env will be recreated from this file. If OS is Windows conda has to be added to the PATH first}

\item{condaenv}{If yml param is provided, a path to the main conda folder. If yml is null, a name of existing conda environment.}

\item{env}{A path to python virtual environment}

\item{data}{test data set that will be passed to explainer if `explain` is TRUE}

\item{y}{vector that will be passed to explainer if `explain` is TRUE}

\item{explain}{indicator if explainer should be returned. When TRUE, requires `data` and `y` to be not NULL. Default is FALSE.}
}
\value{
An object of the class 'scikitlearn_model' or 'explainer'. Depends on explainer param.

scikitlearn_model is a list with following fields:

\itemize{
\item \code{model} it is original model received vie reticiulate function. Use it for computations.
\item \code{predict_function} predict function extracted from original model. It is adjusted to DALEX demands and therfore fully compatibile.
\item \code{type} type model, classification or regression
\item \code{params} object of class `scikitlearn_set` which in fact is list that consist of parameters of our model.
\item \code{label} name of model

}

\bold{Example of Python code}\cr

from pandas import DataFrame, read_csv \cr
import pandas as pd\cr
import pickle\cr
import sklearn.ensemble\cr
model = sklearn.ensemble.GradientBoostingClassifier() \cr
model = model.fit(titanic_train_X, titanic_train_Y)\cr
pickle.dump(model, open("gbm.pkl", "wb"), protocol = 2)\cr
\cr
\cr

\bold{Errors use case}\cr
Here is shortened version of solution for specific errors \cr
\cr
\bold{There already exists environment with a name specified by given .yml file}\cr
You have two ways of solving that issue. Both connected with anaconda prompt. First is removing conda env with command: \cr
\code{conda env remove --name myenv}\cr
And execute function once again. Second is updating env via: \cr
\code{conda env create -f environment.yml}\cr
\cr
\bold{Conda cannot find specified packages at channels you have provided.}\cr
That error may be casued by a lot of things. Of of those is that specified version is too old to be avaialble from offcial conda repo.
Edit Your .yml file and add link to proper repository at channels section.\cr
\cr
Issue may be also connected with the platform. If model was created on the platform with different OS yo may need to remove specific version from .yml file.\cr
\code{- numpy=1.16.4=py36h19fb1c0_0}\cr
\code{- numpy-base=1.16.4=py36hc3f5095_0}\cr
In the example above You have to remove \code{=py36h19fb1c0_0} and \code{=py36hc3f5095_0} \cr
If some packages are not availbe for anaconda at all, use pip statement\cr
\cr
If .yml file seems not to work, virtual env can be created manually using anaconda promt. \cr
\code{conda create -n name_of_env python=3.4} \cr
\code{conda install -n name_of_env name_of_package=0.20} \cr
}
\description{
scikit-learn models may be loaded into R environment like any other Python object. This function helps to inspect performance of Python model
and compare it with other models, using R tools like DALEX. This function creates an object that is easy accessible R version of scikit-learn model
exported from Python via pickle file.
}
\examples{
# Usage with explain()
reticulate::use_condaenv("myenv")
have_sklearn <- reticulate::py_module_available("sklearn.ensemble")
library("DALEX")
library("DALEXtra")
library("reticulate")

if(have_sklearn) {
   # Explainer build (Keep in mind that 18th column is target)
   titanic_test <- read.csv(system.file("extdata", "titanic_test.csv", package = "DALEXtra"))
   # Keep in mind that when pickle is being built and loaded,
   # not only Python version but libraries versions has to match aswell
   model <- scikitlearn_model(system.file("extdata", "scikitlearn.pkl", package = "DALEXtra"), condaenv = "myenv")
   explainer <- explain(model = model, data = titanic_test[,1:17], y = titanic_test$survived, predict_function = model$predict_function)
   print(model_performance(explainer))

   # Predictions with newdata
   predictions <- model$predict_function(model, titanic_test[,1:17])

} else {
  print('Python testing environment is required.')
}


}
\author{
Szymon Maksymiuk
}
