% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_env.R, R/scikitlearn_model.r
\name{create_env}
\alias{create_env}
\alias{scikitlearn_model}
\title{Create Your conda virtual env with DALEX}
\usage{
create_env(yml, condaenv)

scikitlearn_model(path)
}
\arguments{
\item{yml}{string - a path to the .yml file. If OS is Windows conda has to be added to the PATH first}

\item{condaenv}{- a path to main conda folder. If OS is Unix You have to specify it with .yml file path. Using with windows, param will be omitted.}

\item{path}{a path to the pickle file}

\item{env}{A path to python virtual environment}

\item{explain}{indicator if explainer should be returned. When TRUE, requires `data` and `y` to be not NULL. Default is FALSE.}

\item{data}{test data set that will be passed to explainer if `explain` is TRUE}

\item{y}{vector that will be passed to explainer if `explain` is TRUE}

\item{yml}{a path to the yml file. Conda virtual env will be recreated from this file. If OS is Windows conda has to be added to the PATH first}

\item{condaenv}{If yml param is provided, a path to the main conda folder. If yml is null, a name of existing conda environment.}
}
\value{
Name of created virtual env.

An object of the class 'scikitlearn_model' or 'explainer'. Depends on explainer param.

scikitlearn_model is a list with following fields:

\itemize{
\item \code{model} it is original model received vie reticiulate function. Use it for computations.
\item \code{predict_function} predict function extracted from original model. It is adjusted to DALEX demands and therfore fully compatibile.
\item \code{type} type model, classification or regression
\item \code{params} object of class `scikitlearn_set` which in fact is list that consist of parameters of our model.
\item \code{label} name of model

}

\bold{Example of Python code}\cr

from pandas import DataFrame, read_csv \cr
import pandas as pd\cr
import pickle\cr
import sklearn.ensemble\cr
model = sklearn.ensemble.GradientBoostingClassifier() \cr
model = model.fit(titanic_train_X, titanic_train_Y)\cr
pickle.dump(model, open("gbm.pkl", "wb"), protocol = 2)\cr
\cr
\cr

\bold{Errors use case}\cr
Here is shortened version of
}
\description{
Phython objects may be loaded into R. However, it requiers versions of the Python and libraries to match bewtween both machines.

scikit-learn models may be loaded into R environment like any other Python object. This function helps to inspect performance of Python model
and compare it with other models, using R tools like DALEX. This function creates an object that is easy accessible R version of scikit-learn model
exported from Python via pickle file.
}
\examples{
# system.file("extdata", "scikitlearn.pkl", package = "DALEXtra")
# system.file("extdata", "scikitlearn.yml", package = "DALEXtra")

# Usage with explain()
have_sklearn <- reticulate::py_module_available("sklearn.ensemble")
library("DALEX")
library("reticulate")

if(have_sklearn) {
   # Explainer build (Keep in mind that 18th column is target)
   titanic_test <- read.csv(system.file("extdata", "titanic_test.csv", package = "DALEX"))
   # Model was built under Python 3.7 and scikitlearn 0.20.3
   # Keep in mind that when pickle is being built and loaded,
   # not only Python version but libraries versions has to match aswell
   model <- scikitlearn_model(system.file("extdata", "gbm.pkl", package = "DALEX"))
   explainer <- explain(model = model, data = titanic_test[,1:17], y = titanic_test$survived)
   print(model_performance(explainer))

   # Predictions with newdata
   predictions <- model$predict_function(model$model, titanic_test[,1:17])

} else {
  print('Python testing environment is required.')
}


}
\author{
Szymon Maksymiuk

Szymon Maksymiuk
}
